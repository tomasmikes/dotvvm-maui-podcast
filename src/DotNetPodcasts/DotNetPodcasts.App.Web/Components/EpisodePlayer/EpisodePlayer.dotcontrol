@viewModel DotNetPodcasts.App.Web.Components.EpisodePlayer.EpisodePlayerViewModel, DotNetPodcasts.App.Web
@baseType DotNetPodcasts.App.Web.Components.EpisodePlayer.EpisodePlayer, DotNetPodcasts.App.Web
@noWrapperTag

<div class="player-panel" DataContext="{value: EpisodePlayer}" data-prop-name="{value: _root.EpisodePlayerPropName}">
    <div class="player-panel__episode-info">
        <img src="https://picsum.photos/seed/dotvvm-podcast/200/300" alt="podcast image" />
        <div>
            <dot:Literal Text="{value: EpisodeName}" />
            <br />
            <dot:Literal Text="{value: PodcastName}" />
        </div>
    </div>
    <div class="player-panel__playback-tools">
        <div class="player-panel__playback-tools__arrows">
            <cc:Icon Name="backward" Events.Click="{command: _root.ReturnSeconds(15)}"/>
            <cc:Icon Name="play-button" ShowIcon="{value: !IsPlaying}" Events.Click="{command: _root.PauseEpisode()}" />
            <cc:Icon Name="pause" ShowIcon="{value: IsPlaying}" Events.Click="{command: _root.PlayEpisode()}" />
            <cc:Icon Name="fast-forward" Events.Click="{command: _root.SkipSeconds(15)}" />
        </div>
        <div class="player-panel__playback-tools__timer">
            {{value: ElapsedEpisodeTime}}
            <input type="range" min="0" max="{value: TotalEpisodeTime}" step="1" value="{value: ElapsedEpisodeTime}" data-prop-name="{value: ElapsedEpisodeTimePropName}" />
            {{value: TotalEpisodeTime}}
        </div>
    </div>
    <div class="player-panel__playback-options">
        <cc:Icon Name="down-arrow" Events.Click="{command: _root.DecreasePlaybackSpeed()}" />
        <dot:Literal RenderSpanElement="false" Text="{value: PlaybackSpeed}" FormatString="n2" />x
        <cc:Icon Name="up-arrow" Events.Click="{command: _root.IncreasePlaybackSpeed()}" />

        <cc:Icon Name="save" Events.Click="{command: _root.SaveEpisode()}" />

        <div class="player-panel__playback-options__volume">
            <cc:Icon Name="audio" ShowIcon="{value: Volume > 0}" Events.Click="{command: _root.MuteAudio()}" />
            <cc:Icon Name="silence" ShowIcon="{value: Volume == 0}" Events.Click="{command: _root.UnmuteAudio()}" />
            <input type="range" min="0" max="100" step="1" value="{value: Volume}" data-prop-name="{value: VolumePropName}">
        </div>
    </div>
</div>